<!DOCTYPE html>

<meta charset="utf-8">
<style>

.link {
  fill: none;
  stroke: #666;
  stroke-width: 1.5px;
}

 type {
  fill: red;
}

.link.primeros_estilos {
  stroke: blue;
}

.link.resolved {
  stroke-dasharray: 0,2 1;
}

circle {
  fill: #ccc;
  stroke: #333;
  stroke-width: 3.5px;
}

text {
  font: 12px sans-serif;
  pointer-events: none;
  text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
}

</style>
<body>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script>

// http://blog.thomsonreuters.com/index.php/mobile-patent-suits-graphic-of-the-day/
var links = [
  {"source":0,"target":14},
  {"source":0, "target":1},
  {"source":0, "target":2},
  {"source":1, "target":16},
  {"source":1, "target":2},
  {"source":0, "target":3},
  {"source":4, "target":0},
  {"source":5, "target":0},
  {"source":6, "target":5},
  {"source":6, "target":7},
  {"source":7, "target":8},
  {"source":6, "target":9},
  {"source":6, "target":10},
  {"source":6, "target":11},
  {"source":6, "target":12},
  {"source":6, "target":13},
  {"source":6, "target":14},
  {"source":0, "target":8},
  {"source":0, "target":15}
  ]

var nodes = [
  {name: "de la Seguiriya", type: 0},
  {name: "Livianas", type: 2},
  {name: "Serrana", type: 2},
  {name: "Seguiriyas personales", type: 3},
  {name: "Playeras", type: 1},
  {name: "Romances", type: 1},
  {name: "Tonás", type: 1}, //6
  {name: "Carcelera", type: 4},
  {name: "Saetas", type: 6},
  {name: "Martinetes", type: 3},//9
  {name: "Debla", type: 4},
  {name: "Otras tonás", type: 3},
  {name: "Pregones", type: 3},
  {name: "Nanas", type: 3},
  {name: "Cantes camperos", type: 3},
  {name: "Cabales", type: 2},
  {name: "Toná-Liviana", type: 4}]

// Compute the distinct nodes from the links.
links.forEach(function(link) {
  link.source = nodes[link.source] || (nodes[link.source] = {name: link.source});
  link.target = nodes[link.target] || (nodes[link.target] = {name: link.target});
});

var width = 960,
    height = 500;
var color = d3.scale.category20();

var force = d3.layout.force()
    .nodes(d3.values(nodes))
    .links(links)
    .size([width, height])
    .linkDistance(120)
    .charge(-300)
    .on("tick", tick)
    .start();

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

// Per-type markers, as they don't inherit styles.
svg.append("defs").selectAll("marker")
    .data([0,1,2,3,4,5,6])
  .enter().append("marker")
    .attr("id", function(link, idx){ return 'marker-' + idx})//function(d) { return d; })
    .attr("viewBox", "0 -5 10 10")
    .attr("refX", 15)
    .attr("refY", -1.5)
    .attr("markerWidth", 6)
    .attr("markerHeight", 6)
    .attr("orient", "auto")
  .append("path")
    .attr("d", "M0,-5L10,0L0,5");

var path = svg.append("g").selectAll("path")
    .data(force.links())
  .enter().append("path")
    .attr("class", function(d) { return "link " + d.type; })
    .attr("marker-end", function(d) { return "url(#" + d.type + ")"; });

var circle = svg.append("g").selectAll("circle")
    .data(force.nodes())
  .enter().append("circle")
    .attr("r", 9)
	.style("fill", function(d) { return color(d.type); })
    .call(force.drag);

var text = svg.append("g").selectAll("text")
    .data(force.nodes())
  .enter().append("text")
    .attr("x", 8)
    .attr("y", ".31em")
    .text(function(d) { return d.name; });

// Use elliptical arc path segments to doubly-encode directionality.
function tick() {
  path.attr("d", linkArc);
  circle.attr("transform", transform);
  text.attr("transform", transform);
}

function linkArc(d) {
  var dx = d.target.x - d.source.x,
      dy = d.target.y - d.source.y,
      dr = (dx * dx + dy * dy)*100.5;
  return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
}

function transform(d) {
  return "translate(" + d.x + "," + d.y + ")";
}

</script>
